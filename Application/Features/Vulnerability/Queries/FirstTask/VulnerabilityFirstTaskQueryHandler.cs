using Application.Interfaces;
using Domain;
using MediatR;

namespace Application.Features.Vulnerability.Queries.FirstTask;

internal class VulnerabilityFirstTaskQueryHandler : IRequestHandler<VulnerabilityFirstTaskQuery, List<Domain.Vulnerability>>
{
    private readonly IParser _parser;

    public VulnerabilityFirstTaskQueryHandler(IParser parser)
    {
        _parser = parser ?? throw new ArgumentNullException(nameof(parser));
    }

    async Task<List<Domain.Vulnerability>> IRequestHandler<VulnerabilityFirstTaskQuery, List<Domain.Vulnerability>>.Handle(VulnerabilityFirstTaskQuery request, CancellationToken cancellationToken)
    {
        var result = _parser.MapFromByte(request.ByteArray);
        return await Task.FromResult(result);
    }
}
